(function(s,n){typeof exports=="object"&&typeof module<"u"?n(exports):typeof define=="function"&&define.amd?define(["exports"],n):(s=typeof globalThis<"u"?globalThis:s||self,n(s.caduceus={}))})(this,function(s){"use strict";var E=Object.defineProperty;var g=(s,n,a)=>n in s?E(s,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):s[n]=a;var u=(s,n,a)=>g(s,typeof n!="symbol"?n+"":n,a);function n(o,e){return o<e?-1:o>e?1:0}class a{create(e){return new EventSource(e.toString(),{withCredentials:!0})}}const d=o=>(o.includes("*")&&(o=["*"]),[...new Set(o)]),f={handler:()=>{},eventSourceFactory:new a},S={append:!0,types:["message"]};class b{constructor(e,i={}){u(this,"subscribedTopics",[]);u(this,"eventSource",null);u(this,"lastEventId",null);u(this,"options");this.hub=e,this.options={...f,...i}}subscribe(e,i={}){const{append:t,types:c}={...S,...i},r=Array.isArray(e)?e:[e];this.eventSource=this.connect(r,!t);const{handler:l}=this.options,p=h=>{this.lastEventId=h.lastEventId;const T=JSON.parse(h.data);l(T,h)};if(c&&c.length>0)for(const h of c)this.eventSource.addEventListener(h,p)}unsubscribe(e){const i=Array.isArray(e)?e:[e],t=this.subscribedTopics.filter(c=>!i.includes(c));this.connect(t,!0)}connect(e,i){const t=i?[]:d(this.subscribedTopics),c=d(e),r=d([...t,...c]);if(this.eventSource&&r.length>0&&n(t,r)===0)return this.eventSource;if(this.eventSource&&(this.eventSource.close(),r.length===0))return this.eventSource;const l={topic:r.join(",")};this.lastEventId!==null&&(l.lastEventID=this.lastEventId);const p=this.hub+"?"+new URLSearchParams(l);return this.eventSource=this.options.eventSourceFactory.create(p),this.subscribedTopics=r,this.eventSource}}const v={resourceListener:o=>e=>Object.assign(o,e),subscribeOptions:{types:["message"]}};class y{constructor(e,i={}){u(this,"connection");u(this,"listeners",new Map);u(this,"options");this.options={...v,...i},this.connection=new b(e,{...this.options,handler:(t,c)=>{const r=this.listeners.get(t["@id"]);for(const l of r??[])l(t,c)}})}sync(e,i,t){const c=i??e["@id"];this.listeners.has(e["@id"])||(this.listeners.set(e["@id"],[this.options.resourceListener(e)]),this.connection.subscribe(c,{...this.options.subscribeOptions,...t}))}on(e,i){const t=this.listeners.get(e["@id"])??[];t.push(i),this.listeners.set(e["@id"],[...new Set(t)])}unsync(e){this.listeners.delete(e["@id"])}}s.DEFAULT_SUBSCRIBE_OPTIONS=S,s.DefaultEventSourceFactory=a,s.HydraSynchronizer=y,s.Mercure=b,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
