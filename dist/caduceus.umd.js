(function(i,n){typeof exports=="object"&&typeof module<"u"?n(exports):typeof define=="function"&&define.amd?define(["exports"],n):(i=typeof globalThis<"u"?globalThis:i||self,n(i.caduceus={}))})(this,function(i){"use strict";var f=Object.defineProperty;var T=(i,n,u)=>n in i?f(i,n,{enumerable:!0,configurable:!0,writable:!0,value:u}):i[n]=u;var o=(i,n,u)=>T(i,typeof n!="symbol"?n+"":n,u);function n(c,s){return c<s?-1:c>s?1:0}class u{create(s){return new EventSource(s.toString())}}const a=c=>(c.includes("*")&&(c=["*"]),[...new Set(c)]),b={eventSourceFactory:new u,lastEventId:null},l={append:!0};class d{constructor(s,e={}){o(this,"subscribedTopics",[]);o(this,"currentlySubscribedTopics",[]);o(this,"eventSource",null);o(this,"lastEventId",null);o(this,"options");o(this,"listeners",new Map);this.hub=s,this.options={...b,...e},this.lastEventId=this.options.lastEventId}subscribe(s,e={}){const{append:t}={...l,...e},r=Array.isArray(s)?s:[s];this.subscribedTopics=a(t?[...this.currentlySubscribedTopics,...this.subscribedTopics,...r]:r)}on(s,e){this.listeners.has(s)||this.listeners.set(s,[]),this.listeners.get(s).push(e),this.attachListener(s,e)}unsubscribe(s){const e=Array.isArray(s)?s:[s],t=this.subscribedTopics.filter(r=>!e.includes(r));this.subscribedTopics=a(t),this.connect()}connect(){if(this.eventSource&&this.subscribedTopics.length>0&&n(this.subscribedTopics,this.currentlySubscribedTopics)===0)return this.eventSource;if(this.eventSource&&this.eventSource.close(),this.subscribedTopics.length===0)throw new Error("No topics to subscribe to.");const s={topic:this.subscribedTopics.join(",")};this.lastEventId!==null&&(s.lastEventID=this.lastEventId);const e=this.hub+"?"+new URLSearchParams(s);this.eventSource=this.options.eventSourceFactory.create(e);for(const[t,r]of this.listeners.entries())for(const h of r)this.attachListener(t,h);return this.currentlySubscribedTopics=this.subscribedTopics,this.eventSource}attachListener(s,e){this.eventSource&&this.eventSource.addEventListener(s,t=>{this.lastEventId=t.lastEventId;const r={...t,type:s,json:()=>new Promise(h=>h(JSON.parse(t.data)))};e(r)})}}const p={handler:(c,s)=>{c.on("message",async e=>{const t=await e.json(),r=s.get(t["@id"]);for(const h of r??[])h(t,e)})},resourceListener:c=>s=>Object.assign(c,s),subscribeOptions:{append:!0}};class S{constructor(s,e={}){o(this,"connection");o(this,"listeners",new Map);o(this,"options");this.options={...p,...e},this.connection=new d(s,{...this.options});const{handler:t}=this.options;t(this.connection,this.listeners)}sync(s,e,t){const r=e??s["@id"];this.listeners.has(s["@id"])||(this.listeners.set(s["@id"],[this.options.resourceListener(s)]),this.connection.subscribe(r,{...this.options.subscribeOptions,...t}),this.connection.connect())}on(s,e){const t=this.listeners.get(s["@id"])??[];t.push(e),this.listeners.set(s["@id"],[...new Set(t)])}unsync(s){this.listeners.delete(s["@id"])}}i.DEFAULT_SUBSCRIBE_OPTIONS=l,i.DefaultEventSourceFactory=u,i.HydraSynchronizer=S,i.Mercure=d,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
